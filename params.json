{"name":"RefleX","tagline":"Reflection-based Type Modeling for DDS-XTypes","body":"### Welcome to \r\n\r\n![RefleX Logo](https://raw.githubusercontent.com/rticommunity/rticonnextdds-reflex/master/www/reflex-log-small.png)\r\n\r\nRefleX is a short for Reflection for DDS-XTypes. The main objective of this library is to create DDS-XTypes compliant type representations directly from native C++ types. RefleX is declarative–i.e., it is not a reflection API. There is no separate code generation step involved (other than compilation). The RefleX library will take your application-level datatypes in C++ and will happily map them to equivalent DDS topic types.\r\n\r\n### Example\r\nConsider the following simple `ShapeType `class.\r\n```cpp\r\nclass ShapeType {\r\n  std::string color_;\r\n  int x_, y_, shapesize_;\r\n\t\r\npublic:\r\n  ShapeType() {}\r\n  ShapeType(const std::string & color,\r\n            int x, int y, int shapesize)\r\n   : color_(color), x_(x), y_(y),\r\n      shapesize_(shapesize)\r\n  {}\r\n\r\n  std::string & color() { return color_;     }\r\n  int & x()             { return x_;         }\r\n  int & y()             { return y_;         }\r\n  int & shapesize()     { return shapesize_; }\r\n  \r\n  const std::string & color() const { return color_;     }\r\n  const int & x()             const { return x_;         }\r\n  const int & y()             const { return y_;         }\r\n  const int & shapesize()     const { return shapesize_; }\r\n};\r\n```\r\nIf you want to send and receive instances of this class using DDS, simply add the `RTI_ADAPT_STRUCT` macro below. \r\n```cpp\r\n#include \"reflex.h\"\r\n\r\nRTI_ADAPT_STRUCT(\r\n  ShapeType,\r\n  (std::string, color(), RTI_KEY)\r\n  (int,             x())\r\n  (int,             y())\r\n  (int,     shapesize()))\r\n```\r\nThe `ShapeType` class can now be used with RTI Connext DDS.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and we’ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}