{"name":"RefleX","tagline":"Reflection-based Type Modeling for DDS-XTypes","body":"### Welcome to \r\n\r\n![RefleX Logo](https://raw.githubusercontent.com/rticommunity/rticonnextdds-reflex/master/www/reflex-log-small.png)\r\n\r\nRefleX is a short for Reflection for DDS-XTypes. The main objective of this library is to create DDS-XTypes compliant type representations directly from native C++ types. RefleX is declarative–i.e., it is not a reflection API. There is no separate code generation step involved (other than compilation). The RefleX library will take your application-level datatypes in C++ and will happily map them to equivalent DDS topic types.\r\n\r\n### Example\r\nConsider the following simple `ShapeType` class.\r\n```cpp\r\n    class ShapeType {\r\n      std::string color_;\r\n      int x_, y_, shapesize_;\r\n\t\r\n    public:\r\n      ShapeType() {}\r\n      ShapeType(const std::string & color,\r\n                int x, int y, int shapesize)\r\n       : color_(color), x_(x), y_(y),\r\n          shapesize_(shapesize)\r\n      {}\r\n    \r\n      std::string & color() { return color_;     }\r\n      int & x()             { return x_;         }\r\n      int & y()             { return y_;         }\r\n      int & shapesize()     { return shapesize_; }\r\n      \r\n      const std::string & color() const { return color_;     }\r\n      const int & x()             const { return x_;         }\r\n      const int & y()             const { return y_;         }\r\n      const int & shapesize()     const { return shapesize_; }\r\n    };\r\n```\r\nTo send and receive instances of this class using DDS, simply add the `RTI_ADAPT_STRUCT` macro below. Note that the `color` is the key.\r\n```cpp\r\n#include \"reflex.h\"\r\n\r\nRTI_ADAPT_STRUCT(\r\n  ShapeType,\r\n  (std::string, color(), RTI_KEY)\r\n  (int,             x())\r\n  (int,             y())\r\n  (int,     shapesize()))\r\n```\r\nThe `ShapeType` class and its objects can now be used with RTI Connext DDS. Here's the `main` program that writes a `ShapeType` objects. `GenericDataWriter` is an thin shim layer to simplify using DDS DataWriter with RefleX. It is not mandatory, however. \r\n```cpp\r\nint main (void)\r\n{\r\n  // ... setup participant\r\n\r\n  reflex::GenericDataWriter<ShapeType>\r\n      writer(participant, \"Square\");\r\n  ShapeType shape(\"BLUE\", 10, 20, 30);\r\n  writer.write(shape);\r\n}\r\n```\r\nRefleX maps the ShapeType class to the following ShapeType IDL, which is interoperable with Shapes Demo.\r\n```cpp\r\nstruct ShapeType\r\n{\r\n    string<128> color; //@key\r\n    long x;\r\n    long y;\r\n    long shapesize;\r\n};//@Extensibility EXTENSIBLE_EXTENSIBILITY\r\n```\r\n\r\n\r\n\r\n### License\r\n(c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.    \t                             \r\nRTI grants Licensee a license to use, modify, compile, and create derivative works \r\nof the Software.  Licensee has the right to distribute object form only for use with RTI \r\nproducts.  The Software is provided “as is”, with no warranty of any type, including \r\nany warranty for fitness for any purpose. RTI is under no obligation to maintain or \r\nsupport the Software.  RTI shall not be liable for any incidental or consequential \r\ndamages arising out of the use or inability to use the software.\r\n\r\n### Contact \r\nSumant Tambe (sumant at RTI d0t com)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}