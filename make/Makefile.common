###############################################################################
##         (c) Copyright, Real-Time Innovations, All rights reserved.        ##
##                                                                           ##
##         Permission to modify and use for internal purposes granted.       ##
## This software is provided "as is", without warranty, express or implied.  ##
##                                                                           ##
###############################################################################

# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example i86Linux2.6gcc4.1.1)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set
###############################################################################
ifeq ($(ARCH), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'ARCH' is not set!"
	@echo "Try i86Linux3gcc4.8.2 or something like that"
	@echo "***************************************************************"
	@false
else
###############################################################################
# Ensure $NDDSHOME is defined
###############################################################################
ifeq ($(NDDSHOME), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'NDDSHOME' is not set!"
	@echo "To use this makefile you need to set NDDSHOME to the directory"
	@echo "where you have RTI Connext installed."
	@echo "***************************************************************"
	@false
else
###############################################################################
# Ensure $BOOSTHOME is defined
###############################################################################
ifeq ($(BOOSTHOME), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'BOOSTHOME' is not set!"
	@echo "To use this makefile you need to set BOOSTHOME to the directory"
	@echo "where you have Boost Libraries installed."
	@echo "***************************************************************"
	@false
endif
endif
endif


# Define the sources and NDDS search path
INCLUDES = -Iinclude \
           -Itest/generator \
           -I$(NDDSHOME)/include \
           -I$(NDDSHOME)/include/ndds \
           -I$(BOOSTHOME)

REFLEXLIBRARY = reflex

###############################################################################
# Modify build flags for debug/release
###############################################################################
ifeq ($(DEBUG),1)
  CXXFLAGS     += -g -O0 -DREFLEX_DEBUG 
  CXXLDFLAGS   += -g -O0
  ifeq ($(STATICLIB),1)
    NDDSLIBS    = -lnddscppzd -lnddsczd -lnddscorezd -lrticonnextmsgcpp
    REFLEXLIB      = -l$(REFLEXLIBRARY)zd
    REFLEXLIBOUT   = lib$(REFLEXLIBRARY)zd.a
    EXT         = zd
    LIBEXT      = .a
  else
    NDDSLIBS    = -lnddscppd -lnddscd -lnddscored -lrticonnextmsgcpp 
    REFLEXLIB      = -l$(REFLEXLIBRARY)d
    LINKFLAGS  += -fpic -shared
    REFLEXLIBOUT   = lib$(REFLEXLIBRARY)d.so
    EXT         = d
    LIBEXT      = .so
  endif
else
  CXXFLAGS     += -O3 -pg -DBOOST_MPL_LIMIT_LIST_SIZE=20 
  CXXLDFLAGS   += -pg 
  ifeq ($(STATICLIB),1)
    NDDSLIBS    = -lnddscppz -lnddscz -lnddscorez -lrticonnextmsgcpp
    REFLEXLIB      = -l$(REFLEXLIBRARY)z
    REFLEXLIBOUT   = lib$(REFLEXLIBRARY)z.a
    EXT         = z
    LIBEXT      = .a
  else
    NDDSLIBS    = -lnddscpp -lnddsc -lnddscore -lrticonnextmsgcpp
    REFLEXLIB      = -l$(REFLEXLIBRARY)
    LINKFLAGS  += -fpic -shared
    REFLEXLIBOUT   = lib$(REFLEXLIBRARY).so
    LIBEXT      = .so
  endif
endif

LIBS = -L$(NDDSHOME)/lib/$(ARCH) -Lobjs/$(ARCH) $(NDDSLIBS) $(SYSLIBS) 


SOURCES = src/auto_dd.cxx                  \
          src/typecode_manip.cxx           \
          src/datareader_params.cxx        \
          src/datawriter_params.cxx        \
          src/dd_extra.cxx                 \
          src/dd_manip.cxx                 \
          src/reflex.cxx                   \
          src/safe_typecode.cxx            \
          src/entity_common.cxx            \
          src/member_names.cxx

HEADERS = include/reflex/reflex_fwd.h           \
          include/reflex/auto_dd.h              \
          include/reflex/sample.h               \
          include/reflex/datareader.h           \
          include/reflex/datareader_params.h    \
          include/reflex/datawriter_params.h    \
          include/reflex/datawriter.h           \
          include/reflex/dd_manip.h             \
          include/reflex/typecode_manip.h       \
          include/reflex/member_names.h         \
          include/reflex/dd_traits.h            \
          include/reflex/enable_if.h            \
          include/reflex/safe_typecode.h        \
          include/reflex/disc_union.h           \
          include/reflex/dd_extra.h             \
          include/reflex/bounded.h              \
          include/reflex/type_manager.h         \
          include/reflex/safe_dynamicdata.h     \
          include/reflex/adapt_macros.h         \
          include/reflex/tuple_iterator.h       \
          include/reflex/entity_common.h        \
          include/reflex.h


TESTSRCS = test/reflex_test.cxx   \
           test/one_member.cxx    \
           test/all_types.cxx     \
           test/many_members.cxx  \
           test/shape_type.cxx    \
           test/darkart.cxx       \
           test/pointers.cxx      \
           test/large_type.cxx    \
	         test/qs_hello_test.cxx \
	         test/qs_perf_test.cxx  \
           test/stats.cxx

#test/qs_perf_test.cxx 

TESTHEADERS = test/shape_type.h    \
              test/one_member.h    \
              test/all_types.h     \
              test/many_members.h  \
              test/darkart.h       \
              test/pointers.h      \
              test/large_type.h	   \
	            test/qs_hello_test.h \
	            test/qs_perf_test.h  \
              test/stats.h
	      
#test/qs_perf_test.h

PERFSRCS = test/reflex_perf.cxx \
           test/complex.cxx \
           test/complexSupport.cxx \
	         test/complexPlugin.cxx

PERFHEADERS = test/complex.h \
              test/complexSupport.h \
	            test/complexPlugin.h

PROPTESTSRCS = test/reflex_prop_test.cxx 

PROPTESTHEADERS = test/generator/generator.h \
                  test/generator/gen_factory.h \
                  test/generator/type_generator.h

TESTSRCS_NODIR = $(notdir $(TESTSRCS))
TESTOBJS = $(TESTSRCS_NODIR:%.cxx=objs/$(ARCH)/%.o)

PROPTESTSRCS_NODIR = $(notdir $(PROPTESTSRCS))
PROPTESTOBJS = $(PROPTESTSRCS_NODIR:%.cxx=objs/$(ARCH)/%.o)

PERFSRCS_NODIR = $(notdir $(PERFSRCS))
PERFOBJS = $(PERFSRCS_NODIR:%.cxx=objs/$(ARCH)/%.o)

PERFHEADERS_NODIR = $(notdir $(PERFHEADERS))
PERFCODEGEN = $(PERFHEADERS_NODIR:%.h=test/%.cxx)

DIRECTORIES   = objs.dir objs/$(ARCH).dir 
SOURCES_NODIR = $(notdir $(SOURCES))
OBJECTS       = $(SOURCES_NODIR:%.cxx=objs/$(ARCH)/%.o)

# Find out where rtiddsgen is 5.1=scripts 5.2=bin
ifneq ("$(wildcard $(NDDSHOME)/scripts/rtiddsgen)","")
  RTIDDSGEN=$(NDDSHOME)/scripts/rtiddsgen
else
  RTIDDSGEN=$(NDDSHOME)/bin/rtiddsgen
endif

###############################################################################
# Build Rules
###############################################################################
$(ARCH): $(DIRECTORIES) $(OBJECTS) $(REFLEXLIBRARY:%=objs/$(ARCH)/%.o) \
         $(REFLEXLIBRARY:%=objs/$(ARCH)/lib%$(EXT)$(LIBEXT).out)

objs/$(ARCH)/lib%$(EXT).so.out: objs/$(ARCH)/%.o 
	$(CXXLD) $(OBJECTS) $(LINKFLAGS) $(CXXLDFLAGS) -o $(@:%.out=%)  $(LIBS)

objs/$(ARCH)/lib%$(EXT).a.out: objs/$(ARCH)/%.o 
	ar rcs $(@:%.out=%) $(OBJECTS) 

objs/$(ARCH)/%.o: src/%.cxx $(HEADERS)
	$(CXX) -D REFLEX_NO_HEADER_ONLY $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<


# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;

# reflex_prop_test
prop_test: objs/$(ARCH)/$(REFLEXLIBRARY)_prop_test  

objs/$(ARCH)/$(REFLEXLIBRARY)_prop_test: $(PROPTESTOBJS)  
	$(CXXLD) $(CXXLDFLAGS) -o $@ $(PROPTESTOBJS) $(LIBS)

objs/$(ARCH)/reflex_prop_test.o: test/reflex_prop_test.cxx  
	echo $(RANDOM) >> RANDOM_SEEDS.txt
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -DRANDOM_SEED=$(RANDOM) -c $< 


# reflex_test
test: objs/$(ARCH)/$(REFLEXLIBRARY)_test  

objs/$(ARCH)/$(REFLEXLIBRARY)_test: $(TESTOBJS)  
	$(CXXLD) $(CXXLDFLAGS) -o $@ $(TESTOBJS) $(LIBS)

objs/$(ARCH)/%.o: test/%.cxx  
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<


#reflex_perf
perf: objs/$(ARCH)/$(REFLEXLIBRARY)_perf

objs/$(ARCH)/$(REFLEXLIBRARY)_perf: $(PERFCODEGEN) $(PERFOBJS) 
	$(CXXLD) $(CXXLDFLAGS) -o $@ $(PERFOBJS) $(LIBS) $(REFLEXLIB)

objs/$(ARCH)/reflex_perf.o: test/reflex_perf.cxx  
	$(CXX) -D REFLEX_NO_HEADER_ONLY $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

$(PERFCODEGEN): idl/complex.idl
	$(RTIDDSGEN) -language C++ -namespace -d test/ idl/complex.idl

###############################################################################
# Clean target: removes the objs dir
###############################################################################
clean:
	@rm -Rf objs/$(ARCH)
	@echo "Successfully deleted object and executable files for architecture $(ARCH)"
	@echo "To delete ALL the architectures and any generated file use target 'veryclean'"

veryclean:
	@rm -Rf objs
	@rm -Rf test/complex*
	@echo "Deleted all executables, objects and generated files"
